# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Lecture(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, start_time: str=None, end_time: str=None, room_id: str=None, class_id: str=None):  # noqa: E501
        """Lecture - a model defined in Swagger

        :param name: The name of this Lecture.  # noqa: E501
        :type name: str
        :param start_time: The start_time of this Lecture.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this Lecture.  # noqa: E501
        :type end_time: str
        :param room_id: The room_id of this Lecture.  # noqa: E501
        :type room_id: str
        :param class_id: The class_id of this Lecture.  # noqa: E501
        :type class_id: str
        """
        self.swagger_types = {
            'name': str,
            'start_time': str,
            'end_time': str,
            'room_id': str,
            'class_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'room_id': 'roomId',
            'class_id': 'classId'
        }

        self._name = name
        self._start_time = start_time
        self._end_time = end_time
        self._room_id = room_id
        self._class_id = class_id

    @classmethod
    def from_dict(cls, dikt) -> 'Lecture':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Lecture of this Lecture.  # noqa: E501
        :rtype: Lecture
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Lecture.


        :return: The name of this Lecture.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Lecture.


        :param name: The name of this Lecture.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_time(self) -> str:
        """Gets the start_time of this Lecture.


        :return: The start_time of this Lecture.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this Lecture.


        :param start_time: The start_time of this Lecture.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this Lecture.


        :return: The end_time of this Lecture.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this Lecture.


        :param end_time: The end_time of this Lecture.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def room_id(self) -> str:
        """Gets the room_id of this Lecture.


        :return: The room_id of this Lecture.
        :rtype: str
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id: str):
        """Sets the room_id of this Lecture.


        :param room_id: The room_id of this Lecture.
        :type room_id: str
        """
        if room_id is None:
            raise ValueError("Invalid value for `room_id`, must not be `None`")  # noqa: E501

        self._room_id = room_id

    @property
    def class_id(self) -> str:
        """Gets the class_id of this Lecture.


        :return: The class_id of this Lecture.
        :rtype: str
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id: str):
        """Sets the class_id of this Lecture.


        :param class_id: The class_id of this Lecture.
        :type class_id: str
        """
        if class_id is None:
            raise ValueError("Invalid value for `class_id`, must not be `None`")  # noqa: E501

        self._class_id = class_id
