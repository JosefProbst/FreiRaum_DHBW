# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ModelClass(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, class_id: str=None, category: str=None):  # noqa: E501
        """ModelClass - a model defined in Swagger

        :param class_id: The class_id of this ModelClass.  # noqa: E501
        :type class_id: str
        :param category: The category of this ModelClass.  # noqa: E501
        :type category: str
        """
        self.swagger_types = {
            'class_id': str,
            'category': str
        }

        self.attribute_map = {
            'class_id': 'classId',
            'category': 'category'
        }

        self._class_id = class_id
        self._category = category

    @classmethod
    def from_dict(cls, dikt) -> 'ModelClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Class of this ModelClass.  # noqa: E501
        :rtype: ModelClass
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_id(self) -> str:
        """Gets the class_id of this ModelClass.


        :return: The class_id of this ModelClass.
        :rtype: str
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id: str):
        """Sets the class_id of this ModelClass.


        :param class_id: The class_id of this ModelClass.
        :type class_id: str
        """
        if class_id is None:
            raise ValueError("Invalid value for `class_id`, must not be `None`")  # noqa: E501

        self._class_id = class_id

    @property
    def category(self) -> str:
        """Gets the category of this ModelClass.


        :return: The category of this ModelClass.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this ModelClass.


        :param category: The category of this ModelClass.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category
